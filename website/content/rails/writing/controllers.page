--- 
title: Controllers
order: 3
filter:
  - erb
  - textile
--- 

h2. <%= @page.title %>

Controller Examples live in $RAILS_ROOT/spec/controllers/.

In contrast to Test::Unit, where the controller is initialized in the <code>setup</code> method,
with Spec::Raiks you don't. Instead, pass the controller class to the describe method.
Spec::Rails automatically instantiates a controller for you, which you can access
from the examples (it blocks) using the <code>controller</code> method.

h2. Isolation from views

By default, Spec::Rails will run your controller actions in isolation from
their related views. This allows you to spec your controllers before the views
even exist, and will keep the specs from failing when there are errors in your
views.

h2. Optional integration with views

If you prefer to integrate views (a la rails functional testing) you can by including
the keyword/commmand "integrate_views".

<% coderay do -%>
describe ArticlesController do
  integrate_views
  ...
end
<% end -%>

When you integrate views in the controller specs, you can use any of the
expectations that are specific to views as well. Read about "View Examples":views.html
to learn more.

h2. Isolation from the database

We strongly recommend that you use RSpec's "mocking/stubbing framework":../../mocks/index.html
to intercept class level calls like <code>:find</code>, <code>:create</code> and
even <code>:new</code> to introduce mock instances instead of real active_record instances.

This allows you to focus your specs on the things that the controller does and not
worry about complex validations and relationships that should be described in
detail in the "Model Examples":models.html

<% coderay do -%>
account = mock_model(Account)
Account.should_receive(:find).with("37").and_return(account)
<% end -%>

or

<% coderay do -%>
account = mock_model(Account)
Account.stub!(:find).and_return(account)
<% end -%>

See "Mocks and Stubs":../../mocks/index.html for more information about the
built in mocking/stubbing framework.

h2. Response Expectations

These expectations will work whether in isolation or integration mode. See "Spec::Rails::Expectations":../../../rdoc-rails/index.html for details.

h3. response.should be_success

Passes if a status of 200 was returned. NOTE that in isolation mode, this will
always return true, so it's not that useful - but at least your specs won't break.

<% coderay do -%>
response.should be_success
<% end -%>

h3. response.should be_redirect

Passes if a status of 300-399 was returned.

<% coderay do -%>
response.should be_redirect
<% end -%>

h3. response.should render_template

<% coderay do -%>
get 'some_action'
response.should render_template("path/to/template/for/action")
<% end -%>

h3. response.should have_text

<% coderay do -%>
get 'some_action'
response.should have_text("expected text")
<% end -%>

h3. response.should redirect_to

<% coderay do -%>
get 'some_action'
response.should redirect_to(:action => 'other_action')
<% end -%>

The following forms are supported:

<% coderay do -%>
response.should redirect_to(:action => 'other_action')
response.should redirect_to('path/to/local/redirect')
response.should redirect_to('http://test.host/some_controller/some_action')
response.should redirect_to('http://some.other.domain.com')
<% end -%>

h3. assigns, flash and session

Use these to access assigns, flash and session.

<% coderay do -%>
assigns[:key]
flash[:key]
session[:key]
<% end -%>

h2. Routing Expectations

Specify the paths generated by custom routes.

<% coderay do -%>
route_for(:controller => "hello", :action => "world").should == "/hello/world"
<% end -%>

Specify the parameters generated from routes.

<% coderay do -%>
params_from(:get, "/hello/world").should == {:controller => "hello", :action => "world"}
<% end -%>
